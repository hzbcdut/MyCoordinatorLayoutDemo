<resources>
    <string name="app_name">MyCoordinatorLayoutDemo</string>
    <string name="large_text"><![CDATA[What is Constraint Layout? Constraint Layout (\"CL\") is the latest addition to Androidâ€™s collection of layouts. Constraint Layout is a layout that will feel very similar to RelativeLayout at first glance, but as we will see in this article, CL is more powerful and versatile. CL aims to make developing layouts easier, faster, and more intuitive, while improving performance at runtime. If you are interested in speeding up your development time, this article will illustrate many of the basic features of CL, as well as the updated Layout Editor (\"LE\").  Why do we need Constraint Layout?  Speed!!! In many ways, the development of CL and the new LE are all about speed. One of the benefits of CL is its ability to help developers avoid the need to nest ViewGroups, in particular, weighted LinearLayouts and RelativeLayouts. The reason to avoid nesting is because the rendering time can grow exponentially with each level of nesting. If the layout time grows too large, your app will start dropping frames; resulting in choppy transitions.  Second, CL is being built from the ground up alongside the new LE. This means the Google Tools developers have taken the time to ensure that layout development with CL and LE is as intuitive and efficient as possible.  How do I get Constraint Layout?  To get started with CL, you will have to ensure you are pulling in the CL library. Luckily, Google is making this a standalone library; meaning updates should be on a regular cadence. Add the following line into your app/build.gradle:       dependencies {         compile \'com.android.support.constraint:constraint-layout:1.0.0-alpha4\'         // other dependencies     } At the time of writing this blog, 1.0.0-alpha4 is the latest version of CL available. Please note your version could be different. In addition to pulling in the latest CL library, you will also need the updated LE in your Android Studio (\"AS\") install. At the time of writing this article, the LE is only available on the Canary channel (more specifically, Android Studio 2.2 Preview 7). If the design tab of your layouts look like the image below, you have the proper version of Android Studio installed.  Blank layout editor  If your LE does not look like the image above, check out this link for instructions on how to switch to the Canary channel or even install a Canary channel version side by side with your Stable install. How Does Constraint Layout Work  One of the main goals of CL is to give developers a way to efficiently create complex layouts with minimal (ideally, zero) nesting (aside from what is directly inside of a CL). It is best to see how this is achieved by reviewing a few of the available properties in the xml for a widget that is placed inside of a CL. There is a basic pattern to follow when trying to understand these properties. An example pattern is below:  app:layout_constrainThisPartOfMyWidget_toThisPartOfAnotherWidget=\"@+id/another_widget\" So, with this pattern in mind, let\'s look at a few examples and see how CL achieves the flexibility needed to maintain a flat layout hierarchy. In the xml snippet below, you can see a TextView with ID, myTextView. myTextView is essentially centered in the activity_main layout. Its bottom is constrained to the bottom of activity_main, its left is constrained to the left of activity_main, etc. Also, its vertical and horizontal bias default to 0.50 (more on bias later). You can also see otherTextView is constrained to activity_main and myTextView. This is the real core of how CL maintains that zero-depth layout; by allowing widgets to be constrained to their peers and the parent layout in nearly any imaginable way.  <TextView     android:id=\"@+id/myTextView\"     ...     app:layout_constraintBottom_toBottomOf=\"@+id/activity_main\"     app:layout_constraintLeft_toLeftOf=\"@+id/activity_main\"     app:layout_constraintRight_toRightOf=\"@+id/activity_main\"     app:layout_constraintTop_toTopOf=\"@+id/activity_main\"/>  <TextView     android:id=\"@+id/otherTextView\"     ...     app:layout_constraintBottom_toTopOf=\"@+id/myTextView\"     app:layout_constraintLeft_toLeftOf=\"@+id/activity_main\"     app:layout_constraintRight_toRightOf=\"@+id/activity_main\"     app:layout_constraintTop_toTopOf=\"@+id/activity_main\"/>  The example above shows only a small sample of possible constraints. The list of possible constraints includes the following (as well as many others).  <View     app:layout_constraintBaseline_creator=\"@+id/some_view\"     app:layout_constraintBaseline_toBaselineOf=\"@+id/some_view\"     app:layout_constraintCenterX_toCenterX=\"@+id/some_view\"     app:layout_constraintDimensionRatio=\"@+id/some_view\"     app:layout_constraintEnd_toEndOf=\"@+id/some_view\"     app:layout_constraintGuide_begin=\"@+id/some_view\"     app:layout_constraintGuid_Percent=\"@+id/some_view\"     app:layout_constraintHorizontal_bias=\"@+id/some_view\"/> If you would like to create your layouts exclusively with xml, that is achievable; however, the Google Tools team kept CL in mind while developing the LE, thus it is easy to drag, drop, and fine tune your layout and constraints right from the LE user interface. Let\'s review that further.  Layout Editor Features  There are several differences between the old layout tool and the updated LE. Let\'s review those differences one by one to ensure a strong understanding of enhanced functionality.  Design View and Blueprint View  The first thing that jumps out with the new LE is the two \'layout previews\' in the main portion of the editor. The preview on the left is called the Design View and should look rather familiar. For the most part, this is the same design view we had in previous versions of AS. The noticeable difference between the new Design View and the previous version is that it displays constraints when your mouse is hovering over the Design View.  On the right is the Blueprint View. This view shows the widgets in your layout and their size, position, and how they are constrained to other peer views and/or the parent layout.  Design View and Blueprint View  Let\'s take a close look at a single element within the Blueprint View. When a widget within the Blueprint View is clicked, several elements are displayed on top of that widget. Each corner has a \'resize\' handle that can be used to resize the widget. Each side has an \'anchor point\' that can be used to constrain the widget to something else. Finally, the rounded rectangle within bottom portion of the widget is another type of anchor point that can be used to align widgets according to their texts.   Blueprint View Elements  Properties View  The Properties View is another aspect new to first time users of the updated LE. There is a fair amount of information packed into this view, but luckily, most of this is familiar to android developers, just displayed in a slightly different manner.  Properties View  At the very top of this view is where you can enter the ID of the particular widget currently highlighted. Below that is the the most interesting part of the Properties View. Let\'s start at the center of this section and work our way out.  First, the square directly in the center has several set of carats, pointing towards the center. These carats are one of three different sets of shapes that you\'ll see here. Each of the three different sets of shapes represent a different sizing method for the layout_width and layout_height. The inward pointing carats represent wrap_content. The \'I\' shape represents a fixed value. Finally, the sawtooth shape represents a sizing method called any_size. any_size will be reviewed more later, but as a preview, any_size is similar to match_parent just with some tweaks in functionality to make it more intuitive and usable with CL. The sizing method can be changed by clicking on the shapes within the square or by the layout_width and layout_height dropdown menus.  Change Sizing Method  The \'T\'s that are reaching out of each side of that center square have a number close to the neck of each of them. This number represents the margins of the particular view or widget that is currently selected. So, if you wanted to modify the margin on any of the sides of a view, you can click on the number for said side and it will turn in to a dropdown menu where you can choose from common margin sizes or type in a custom size.  Quick Tip: If you have a view requiring a particular size margin on all sides, you can choose a default margin in the CL toolbar before you pull in the view. Then, when you pull in that view, any constraints you manually create (meaning, you didn\'t use \'Infer Constraints\' or \'AutoConnect\'...more on those concepts later) will have the default margin value selected in the toolbar.  Default Margins]]></string>

</resources>
